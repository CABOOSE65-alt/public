# Minimal Streamlit App for EV Charging Profile Generator

import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from io import BytesIO

# Truck specifications
TRUCK_MODELS = {
    'Volvo FM electric': {
        'battery_kWh': 540,
        'useful_kWh': 400,
        'max_charge_kW': 250,
        'efficiency_kWh_per_km': 1.333333333
    },
    'Windrose': {
        'battery_kWh': 729,
        'useful_kWh': 705,
        'max_charge_kW': 960,
        'efficiency_kWh_per_km': 1.052238806
    },
    'Scania 624 kWh': {
        'battery_kWh': 624,
        'useful_kWh': 600,
        'max_charge_kW': 375,
        'efficiency_kWh_per_km': 1.090909091
    }
}

CHARGING_EFFICIENCY = 0.94
LOOP_DISTANCE_KM = 200
LOOPS_PER_SHIFT = 2

st.title("EV Charging Profile Generator")

# User inputs
fleet_size = st.slider("Fleet Size", 20, 50, 20)
truck_mix = st.selectbox("Fleet Mix", ['50% Volvo / 50% Windrose', '100% Volvo', '100% Windrose'])
max_chargers = st.slider("Max Chargers Available", 1, 50, 20)
mid_shift = st.checkbox("Include Mid-shift Charging")

# Generate schedule
def generate_schedule(fleet_size, truck_mix):
    if truck_mix == '50% Volvo / 50% Windrose':
        mix = ['Volvo FM electric'] * (fleet_size // 2) + ['Windrose'] * (fleet_size - fleet_size // 2)
    elif truck_mix == '100% Volvo':
        mix = ['Volvo FM electric'] * fleet_size
    elif truck_mix == '100% Windrose':
        mix = ['Windrose'] * fleet_size

    start_time = datetime.strptime('06:00', '%H:%M')
    schedule = []
    for i, truck_type in enumerate(mix):
        dep = start_time + timedelta(minutes=15 * i)
        arr = dep + timedelta(hours=12)
        energy_kWh = LOOP_DISTANCE_KM * LOOPS_PER_SHIFT * TRUCK_MODELS[truck_type]['efficiency_kWh_per_km'] / CHARGING_EFFICIENCY
        schedule.append({
            'TruckID': f'Truck_{i+1}',
            'TruckType': truck_type,
            'Departure': dep,
            'Arrival': arr,
            'Energy_kWh': energy_kWh
        })
    return pd.DataFrame(schedule)

# Simulate charging profile
def simulate_charging(df):
    start = df['Departure'].min().floor('15T')
    end = df['Arrival'].max().ceil('15T')
    time_index = pd.date_range(start, end, freq='15T')
    charging_matrix = pd.DataFrame(index=time_index)
    summary = pd.DataFrame(index=time_index)
    for i, row in df.iterrows():
        truck = row['TruckID']
        kW = TRUCK_MODELS[row['TruckType']]['max_charge_kW']
        duration = row['Energy_kWh'] / kW
        t = row['Arrival'] - timedelta(hours=duration)
        while t < row['Arrival']:
            if t in charging_matrix.index:
                charging_matrix.at[t, truck] = round(kW / 1000, 2)
            t += timedelta(minutes=15)
    charging_matrix.fillna(0.0, inplace=True)
    summary['MW'] = charging_matrix.sum(axis=1)
    summary['ChargersActive'] = (charging_matrix > 0).sum(axis=1)
    return summary, charging_matrix

if st.button("Run Simulation"):
    schedule_df = generate_schedule(fleet_size, truck_mix)
    summary_df, matrix_df = simulate_charging(schedule_df)

    st.line_chart(summary_df[['MW']])
    st.line_chart(summary_df[['ChargersActive']])

    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        summary_df.to_excel(writer, sheet_name='Summary')
        matrix_df.to_excel(writer, sheet_name='TruckCharging')
    st.download_button("Download Excel", data=output.getvalue(), file_name="ev_charging_output.xlsx")
